package ${WSM.currentDataObject.servicePackageName};


import java.util.ArrayList;

import java.util.List;

import oracle.ateam.sample.mobile.v2.persistence.util.EntityUtils;
import oracle.ateam.sample.mobile.v2.persistence.service.EntityCRUDService;

import ${WSM.currentDataObject.fullyQualifiedClassName};


/**
 *  Service class that provides CRUD and custom operations against the ${WSM.currentDataObject.classVariableName} data object.
 *  The behavior of this class is driven by the ${WSM.currentDataObject.classVariableName} classMappingDescriptor in persistence-mapping.xml.
 *  
 *  You can customize and extend this behavior by overriding methods of the EntityCRUDService superclass, and/or
 *  creating a subclass of the local and remote persistence managers as configured in persistence-mapping.xml.
 */
public class ${WSM.currentDataObject.serviceClassName}
  extends EntityCRUDService<${WSM.currentDataObject.className}>
{

  /**
   * Default constructor. If autoQuery is set to true in the classMappingDescriptor in persistence-mapping.xml, then 
   * the findAll method will be executed and the ${WSM.currentDataObject.classVariableName} list will be populated when this constructor is invoked. 
   * If you created a data control for this service class, the data control will use this constructor, allowing you to 
   * immediately show data in your user interface when accessing the data control for the first time.
   * By default, the findAll method will first query the local SQLite database for any rows and show these immediately in
   * the UI. Then the remote findAll method as configured in persistence-mapping.xml will be executed in the background, 
   * and the UI will be automatically refreshed when the remote data have been processed and stored in the local SQLite 
   * database.
   * If you want the user to wait until the remote data have been processed and not show local data first, you can set 
   * the remoteReadInBackground attribute in the classMappingDescriptor to false.
   * 
   * If you need programmatic access to the same instance of this class as used by the bean data control typically
   * created for this class, then you can use the following convenience method:
   *  
   * ${WSM.currentDataObject.serviceClassName} crudService = (${WSM.currentDataObject.serviceClassName}) EntityUtils.getEntityCRUDService(${WSM.currentDataObject.className}.class);
   *  
   * Note that calling this method might fire a remote method call when autoQuery is set to true in the
   * classMappingDescriptor and the data control has not been instantiated yet for the feature context in which you
   * execute the above call. Remember: each feature has its own class loader, bean data controls are NOT shared
   * accross features unless you generated this service class in the ApplicationController project and created the
   * data control there.
   */
  public ${WSM.currentDataObject.serviceClassName}()
  {
  }

  /**
   * Use this constructor with autoQuery=false in Java code when you want to execute a method in this service class
   * without autoQuery as configured in persistence-mapping.xml taking place. 
   */
  public ${WSM.currentDataObject.serviceClassName}(boolean autoQuery)
  {
    super(autoQuery);
  }

  protected Class getEntityClass()
  {
    return ${WSM.currentDataObject.className}.class;
  }

  protected String getEntityListName()
  {
    return "${WSM.currentDataObject.classVariableName}";
  }

  public List<${WSM.currentDataObject.className}> get${WSM.currentDataObject.className}()
  {
    return getEntityList();
  }

  /**
   * This method is automatically called when using the Create operation on the ${WSM.currentDataObject.classVariableName} collection
   * in the data control palette. 
   * 
   * Note that this method does NOT add the ${WSM.currentDataObject.classVariableName} to the entity list because this method is 
   * automatically called by MAF framework when using the Create operation from the data control palette. 
   * MAF will add the entity to the list AFTER this method has been executed. 
   * 
   * You can use this method to set default values. 
   * If you want to refresh data in the UI based on the size of the entity list, then you cannot do this in this
   * method because the list is not updated yet (see above), instead override method entityAdded and add your 
   * logic there. The AMPA EntityList class ensures that this method is called after a ${WSM.currentDataObject.classVariableName} has been added.
   * If you want to directly add a storage object without using the binding layer, then call the overloaded version
   * of this method with addToList argument set to true.
   * 
   * Do NOT drag and drop this method from the data control palette, use the Create operation 
   * instead to ensure that iterator binding and ${WSM.currentDataObject.classVariableName} list stay in sync.
   * @param index
   * @param ${WSM.currentDataObject.classVariableName}
   */
   public void add${WSM.currentDataObject.className}(int index, ${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
   {
     addEntity(index, ${WSM.currentDataObject.classVariableName});
   }

  /**
   * Sets ${WSM.currentDataObject.classVariableName} state to new, and if addToList argument is true, it adds the ${WSM.currentDataObject.classVariableName} to the
   * ${WSM.currentDataObject.classVariableName} list and and fires change event to refresh the list in the UI
   * @param index
   * @param ${WSM.currentDataObject.classVariableName}
   * @param addToList
   */
   public void add${WSM.currentDataObject.className}(int index, ${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName}, boolean addToList)
  {
     addEntity(index, ${WSM.currentDataObject.classVariableName}, addToList);
  }

  /**
   * This method is automatically called when using the Delete operation on the ${WSM.currentDataObject.classVariableName} collection
   * in the data control palette. It deletes the corresponding row from the database (if persisted) and 
   * calls the configured remove method on the remote persistence manager.
   * 
   * Note that this method does NOT remove the ${WSM.currentDataObject.classVariableName} from the entity list because this method is 
   * automatically called by MAF framework when using the Delete operation from the data control palette. 
   * MAF will remove the entity from the list AFTER this method has been executed. 
   * If you want to directly remove a storage object without using the binding layer, then call the overloaded version
   * of this method with removeFromList argument set to true.
   * 
   * If you want to refresh data in the UI based on the size of the entity list, then you cannot do this in this
   * method because the list is not updated yet (see above), instead override method entityRemoved and add your 
   * logic there. The AMPA EntityList class ensures that this refresh method is called after a ${WSM.currentDataObject.classVariableName} has been added.
   * 
   * Do NOT drag and drop this method from the data control palette, use the Delete operation 
   * instead to ensure that iterator binding and ${WSM.currentDataObject.classVariableName} list stay in sync.
   * @param ${WSM.currentDataObject.classVariableName}
   */
   public void remove${WSM.currentDataObject.className}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
   {
     removeEntity(${WSM.currentDataObject.classVariableName});
   }
    

  /**
   * Removes a ${WSM.currentDataObject.classVariableName} using the configured local and remote persistence managers.
   * If removeFromList argument is true, it removes the ${WSM.currentDataObject.classVariableName} from the
   * a ${WSM.currentDataObject.classVariableName} list and and fires change event to refresh the list in the UI
   * @param a ${WSM.currentDataObject.classVariableName}
   * @param removeFromList
   */
   public void remove${WSM.currentDataObject.className}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName}, boolean removeFromList)
   {
     removeEntity(${WSM.currentDataObject.classVariableName}, removeFromList);
   }

    /**
     * Inserts or updates a ${WSM.currentDataObject.classVariableName} using the configured persistence managers.
     * The insert or update is determined by calling isNewEntity on the ${WSM.currentDataObject.classVariableName} instance.
     * @param ${WSM.currentDataObject.classVariableName}
     */
    public void save${WSM.currentDataObject.className}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
    {
      super.mergeEntity(${WSM.currentDataObject.classVariableName});
    }

    /**
     * Retrieves all ${WSM.currentDataObject.classVariableName} instances using the configured persistence managers and populates the ${WSM.currentDataObject.classVariableName} list 
     * with the result.
     * When this method is called for the first time, and a remote persistence manager is configured,
     * the data is fetched remotely and the local DB is populated with the results.
     */
    public void findAll${WSM.currentDataObject.className}()
    {
      super.findAll();
    }

    /**
     * Retrieves all ${WSM.currentDataObject.classVariableName} instances using the findAll method on the remote persistence manager
     * and populates the ${WSM.currentDataObject.classVariableName} list 
     */
    public void findAll${WSM.currentDataObject.className}Remote()
    {
      super.doRemoteFindAll();
    }

    /**
     * Retrieves the ${WSM.currentDataObject.classVariableName} instances that match the searchValue filter using the configured persistence 
     * managers and populates the ${WSM.currentDataObject.classVariableName} list with the result.
     * By default, the search value is applied to all string attributes using a "startsWith" operator. 
     * To customize the attributes on which the searchValue is applied, you can override method getQuickSearchAttributeNames. 
     * If a find method is configured against the remote persistence manager, then this method will also
     * call this method.
     * @param searchValue
     */
    public void find${WSM.currentDataObject.className}(String searchValue)
    {
      super.find(searchValue);
    }

  #if (${WSM.currentDataObject.getCanonicalMethod})
  /**
   * Invokes the getCanonical method on the remote persistence manager if this has not happened yet
   * for this instance during this application session. The corresponding row in the local database is also updated if
   * the entity is persistable. This method uses the setting of remote-read-in-background property
   * in persistenceMapping.xml to determine whether the method is executed in the background.
   * While you can call this method from the user interface layer using the data control palette, it is easier and 
   * cleaner to call this method from a getter method for one of the attributes that will be populated by the
   * getCanonical method call. Here is an example of the code you should add to such a getter method:
   * 
   * if (!canonicalGetExecuted())
   * {
   *   ${WSM.currentDataObject.serviceClassName} crudService = (${WSM.currentDataObject.serviceClassName}) EntityUtils.getEntityCRUDService(Department.class);
   *   crudService.getCanonical${WSM.currentDataObject.className}(this);
   * }
   * 
   * If you specifed the getCanonical triggering attribute in the AMPA REST wizard, then the above code is already generated
   * for you.
   * 
   * @param ${WSM.currentDataObject.classVariableName}
   */
  public void getCanonical${WSM.currentDataObject.className}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
  {
    super.getCanonical(${WSM.currentDataObject.classVariableName},isDoRemoteReadInBackground());
  }
  #end

    /**
     * Resets the values of the ${WSM.currentDataObject.classVariableName} instance to the values as stored in the SQLite database. This method
     * will do nothing when the ${WSM.currentDataObject.classVariableName} is not persisted to the database.
     * @param ${WSM.currentDataObject.classVariableName}
     */
    public void reset${WSM.currentDataObject.className}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
    {
      super.resetEntity(${WSM.currentDataObject.classVariableName});
    }


  #foreach($method in ${WSM.currentDataObject.customMethods})
    /**
     * Invoke custom method "${method.accessorAttribute}
     */
    public void ${method.accessorAttribute}(${WSM.currentDataObject.className} ${WSM.currentDataObject.classVariableName})
    {
      invokeCustomMethod(${WSM.currentDataObject.classVariableName}, "${method.accessorAttribute}");
    }
  #end


}


