package ${WSM.currentDataObject.packageName};

#if (${WSM.currentDataObject.children.size()}>0)
import java.util.Arrays;
import java.util.List;
import oracle.ateam.sample.mobile.v2.persistence.util.EntityUtils;
import oracle.ateam.sample.mobile.v2.persistence.manager.DBPersistenceManager;
#end
#if (${WSM.currentDataObject.parents.size()}>0)
import oracle.ateam.sample.mobile.v2.persistence.service.ValueHolderInterface;
#end
import oracle.ateam.sample.mobile.v2.persistence.model.Entity;
#if (${WSM.currentDataObject.canonicalTriggerAttribute})
import ${WSM.currentDataObject.fullyQualifiedServiceClassName};
#end

  #foreach($type in ${WSM.currentDataObject.attributeImportTypes})
     import ${type};
  #end

  #foreach($child in ${WSM.currentDataObject.children})
    #if (${child.childDataObject.packageName}!=${WSM.currentDataObject.packageName})
      import ${child.childDataObject.fullyQualifiedClassName};
    #end
    #if ($child.methodAccessor)
      import ${child.childDataObject.fullyQualifiedServiceClassName};
    #end
  #end
  #foreach($parent in ${WSM.currentDataObject.parents})
    #if (${parent.parentDataObject.packageName}!=${WSM.currentDataObject.packageName})
      import ${parent.parentDataObject.fullyQualifiedClassName};
    #end
  #end

public class ${WSM.currentDataObject.className} extends Entity
{

  #foreach($attr in ${WSM.currentDataObject.attributeDefs})
    private $attr.javaType $attr.attrName;
  #end

  #foreach($child in ${WSM.currentDataObject.children})
    private List<${child.childDataObject.className}> ${child.childAccessorName} = createIndirectList("${child.childAccessorName}");
  #end

  #foreach($parent in ${WSM.currentDataObject.parents})
    private ValueHolderInterface ${parent.parentAccessorName}Holder = createValueHolder("${parent.parentAccessorName}");
    private transient ${parent.parentDataObject.className} ${parent.parentAccessorName};
  #end

  #foreach($attr in ${WSM.currentDataObject.attributeDefs})
    public $attr.javaType ${attr.getterMethodName}()
    {
      #if (${WSM.currentDataObject.canonicalTriggerAttribute} && ${attr}==${WSM.currentDataObject.canonicalTriggerAttribute})

    if (!canonicalGetExecuted() && !getIsNewEntity())
    {
      ${WSM.currentDataObject.serviceClassName} crudService = (${WSM.currentDataObject.serviceClassName}) EntityUtils.getEntityCRUDService(${WSM.currentDataObject.className}.class);
      crudService.getCanonical${WSM.currentDataObject.className}(this);
    }
      #end
      return this.${attr.attrName};
    }

    public void ${attr.setterMethodName}(${attr.javaType} ${attr.attrName})
    {
      this.${attr.attrName} = ${attr.attrName};
    }

  #end
  #foreach($child in ${WSM.currentDataObject.children})

    public void ${child.childAccessorSetterMethodName}(List<${child.childDataObject.className}> ${child.childAccessorName})
    {
      this.${child.childAccessorName}.clear();
      this.${child.childAccessorName}.addAll(${child.childAccessorName});
      getProviderChangeSupport().fireProviderRefresh("${child.childAccessorName}");
    }

    /**
     * This method is called when entity instance is recreated from persisted JSON string in DataSynchAction
     */
    public void ${child.childAccessorSetterMethodName}(${child.childDataObject.className}[] ${child.childAccessorName})
    {
      ${child.childAccessorSetterMethodName}(Arrays.asList(${child.childAccessorName}));
    }

    public List<${child.childDataObject.className}> ${child.childAccessorGetterMethodName}()
    {
      return this.${child.childAccessorName};
    }


  public void add${child.childDataObject.className}(int index, ${child.childDataObject.className} ${child.childDataObject.classVariableName})
  {
    ${child.childDataObject.classVariableName}.setIsNewEntity(true);
    EntityUtils.generatePrimaryKeyValue(${child.childDataObject.classVariableName}, 1);
    #foreach($mapping in $child.attributeMappings) 
     ${child.childDataObject.classVariableName}.${mapping.childAttrSetterMethod}(${mapping.parentAttrGetterMethod}());
    #end
  }

  public void remove${child.childDataObject.className}(${child.childDataObject.className} ${child.childDataObject.classVariableName})
  {
    #if ($child.methodAccessor)
      ${child.childDataObject.serviceClassName} crudService = (${child.childDataObject.serviceClassName}) EntityUtils.  getEntityCRUDService(${child.childDataObject.classVariableName}.getClass());
      crudService.remove${child.childDataObject.className}(${child.childDataObject.classVariableName});
    #else
      DBPersistenceManager pm = new DBPersistenceManager();
      pm.removeEntity(${child.childDataObject.classVariableName}, true);
    #end
  }

  #end

  #foreach($parent in ${WSM.currentDataObject.parents})

  public ${parent.parentDataObject.className} ${parent.parentAccessorGetterMethodName}()
  {
    return (${parent.parentDataObject.className}) this.${parent.parentAccessorName}Holder.getValue();
  }

  protected ValueHolderInterface ${parent.parentAccessorGetterMethodName}Holder()
  {
    return this.${parent.parentAccessorName}Holder;
  }

  public void ${parent.parentAccessorSetterMethodName}(${parent.parentDataObject.className} ${parent.parentAccessorName})
  {
    this.${parent.parentAccessorName}Holder.setValue(${parent.parentAccessorName});
  }

  protected void ${parent.parentAccessorSetterMethodName}Holder(ValueHolderInterface ${parent.parentAccessorName})
  {
    this.${parent.parentAccessorName}Holder = ${parent.parentAccessorName};
  }

  #end


}
